.program demo_read

.wrap_target
    ;out PINS, 16 side 1 [15]
    ;nop          side 0
    out PINS, 16
    nop
    ;nop side 0
.wrap


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void demo_read_program_init(PIO pio, uint sm, uint offset, uint pin) {
    for (int i = 0; i <= 16; ++i)
    {
       pio_gpio_init(pio, pin + i);
    }
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 16, true);
   pio_sm_config c = demo_read_program_get_default_config(offset);

   // Configure side-set options: 1 bit, not optional, does not affect pindirs
   //sm_config_set_sideset(&c, 1, false, false);
   //sm_config_set_sideset_pins(&c, pin + 3);
   sm_config_set_out_pins(&c, pin, 16);

   //sm_config_set_out_shift(&c, true, true, 16);

   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_enabled(pio, sm, true);
}
%}
